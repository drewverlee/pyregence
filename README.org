* Pyregence

Pyregence is a web portal for displaying near-term fire forecast
results for the state of California. The fire spread and impact maps
are generated by running multiple state-of-the-art simulation models
on a continuously updated stream of weather data.

At this time, Pyregence displays results from these open source fire
behavior models:

1. [[https://github.com/pyregence/gridfire][GridFire]]
2. [[https://github.com/pyregence/elmfire][ELMFIRE]]
3. [[https://github.com/pyregence/quicfire][QuicFire]]

** Installation Requirements

- [[https://jdk.java.net][Java Development Kit (version 11+)]]
- [[https://clojure.org/guides/getting_started][Clojure CLI tools]]
- [[https://www.postgresql.org/download][Postgresql]]
- [[https://postgis.net/install][PostGIS]]

** Environment Variable Setup

In order for your command line shell to find the programs installed
above, you will need to update your environment variables. Under
GNU/Linux, *BSD, or MacOS X, you can set these through your shell's
.*rc or .*profile configuration files in your $HOME directory. In a
Windows environment, you will need to set either the USER (for the
current user only) or SYSTEM (for any user) environment variables
under your system settings menu.

*** Step 1: Add JAVA_HOME

On a Unix machine using bash (e.g., GNU/Linux or MacOS X):

#+begin_src sh
export JAVA_HOME=<jdk-installation-directory>
#+end_src

On a Unix machine using csh or tcsh (e.g., *BSD):

#+begin_src sh
setenv JAVA_HOME <jdk-installation-directory>
#+end_src

On a Windows machine:

#+begin_example
JAVA_HOME = C:\Program Files\Java\jdk-X.X.X
#+end_example

Replace *X.X.X* with the JDK version installed on your computer.

*** Step 2: Update PATH

On a Unix machine using bash (e.g., GNU/Linux or MacOS X):

#+begin_src sh
export PATH=$PATH:$JAVA_HOME/bin
#+end_src

On a Unix machine using csh or tcsh (e.g., *BSD):

#+begin_src sh
setenv PATH $PATH\:$JAVA_HOME/bin
#+end_src

On a Windows machine, add these entries to the PATH environment
variable:

#+begin_example
%JAVA_HOME%\bin
C:\Program Files\PostgreSQL\X\lib
C:\Program Files\PostgreSQL\X\bin
#+end_example

Replace *X* with the PostgreSQL version installed on your computer.

** Postgresql Database Setup

*PostgreSQL* needs to be installed on the machine that will be hosting
the Pyregence website. Once the Postgresql database server is running
on your machine, you should navigate to the toplevel directory and run
the database build command as follows:

#+begin_src sh
$ clojure -A:build-db build-all
#+end_src

This will begin by creating a new database and role called *pyregence*
and then add the pgcrypto and postgis extensions to it. Next, the
script will populate the database with the schemas, tables, and
functions that are necessary for storing and processing Pyregence's
data. Finally, it will load some default data into these tables that
is necessary for the website to function properly.

*** Postgresql Parallel Settings

To enable parallel processing, find the postgresql.conf file located in
your installation's data directory and update the following settings:

#+begin_example
max_worker_processes = 12
max_parallel_maintenance_workers = 8
max_parallel_workers_per_gather = 4
parallel_leader_participation = on
max_parallel_workers = 40
#+end_example

Once you have made these changes, remember to stop and restart your
Postgresql database server.

** Email Server

To set up the email server for system emails, start by creating a file
named `email-server.edn` in the root directory of the application. Add
the following EDN object containing server details to the file,
replacing the values with your own:

#+begin_src clojure
{:site-url "https://pyregence.org"
 :host     "smtp.gmail.com"
 :user     "example@gmail.com"
 :pass     "changeme"
 :ssl      true}
#+end_src

** Usage

To compile and run the web application, navigate to the toplevel
project directory and run:

#+begin_src sh
$ clojure -A:compile-cljs
$ clojure -A:run-server [port] [dev|prod]
#+end_src

The website will then be available at http://localhost:8080 or on
whichever port you specified. In dev mode, server-side exceptions will
be displayed in the browser and Clojure source files will be reloaded
whenever you refresh the page. These features are disabled in prod
mode. If the second argument to run-server is omitted, it will default
to prod mode.

** Development

*** Compiling Clojurescript to Javascript

To compile the Clojurescript files under src/cljs to Javascript under
target/public/cljs, navigate to the toplevel project directory and
run:

#+begin_src sh
$ clojure -A:compile-cljs
#+end_src

The main Javascript entry point file will be written to
target/public/cljs/app.js. The Clojurescript compiler options are read
from the toplevel compile-prod.cljs.edn file.

*** Launching Figwheel

To start the Figwheel server, navigate to the toplevel project
directory and run:

#+begin_src sh
$ clojure -A:figwheel
#+end_src

This will start a webserver on http://localhost:8080, which serves up
the website in dev mode. Any changes to CLJS files will be
automatically pushed to the browser when the files are saved. Any
changes to CLJ files will be pushed to the running server process. A
CLJS browser REPL will also be launched at the terminal for you to
interactively develop your client-side code.

** License and Distribution

FIXME: Fill in this section.
